// controllers/adminController-1.js
const Admin = require("../models/Admin");

/**
 * Autenticaci√≥n de administrador con validaci√≥n y sanitizaci√≥n b√°sica.
 * Mantiene la l√≥gica original: busca por `usuario`, compara contrase√±a y responde datos m√≠nimos.
 */
const autenticarAdmin = async (req, res) => {
  try {
    // üßº Sanitizaci√≥n y validaci√≥n de entrada
    const rawUsuario = (req.body?.usuario ?? "").toString().trim();
    const rawPassword = (req.body?.contrase√±a ?? "").toString();

    if (!rawUsuario || !rawPassword) {
      return res.status(400).json({ msg: "Faltan credenciales: usuario y contrase√±a son obligatorios" });
    }

    // Validaciones b√°sicas de formato (no rompemos tu flujo)
    if (rawUsuario.length < 3 || rawUsuario.length > 64) {
      return res.status(400).json({ msg: "Usuario inv√°lido" });
    }
    if (rawPassword.length < 6 || rawPassword.length > 128) {
      return res.status(400).json({ msg: "Contrase√±a inv√°lida" });
    }

    // üîé B√∫squeda de admin
    const admin = await Admin.findOne({ usuario: rawUsuario });
    if (!admin) {
      // No revelar si el usuario existe o no en ambientes m√°s estrictos; aqu√≠ mantenemos tu 404
      return res.status(404).json({ msg: "Usuario no encontrado" });
    }

    // üîê Comparaci√≥n de contrase√±a
    const esCorrecto = await admin.compararPassword(rawPassword);
    if (!esCorrecto) {
      return res.status(401).json({ msg: "Contrase√±a incorrecta" });
    }

    // ‚úÖ Respuesta m√≠nima (sin exponer datos sensibles)
    return res.status(200).json({
      msg: "Login exitoso",
      usuario: admin.usuario,
      id: admin._id,
    });
  } catch (_err) {
    // No exponemos el error interno en producci√≥n
    return res.status(500).json({ msg: "Error en el servidor" });
  }
};

module.exports = { autenticarAdmin };
